import com.sun.org.apache.regexp.internal.RE;

import java.util.ArrayList;
import java.util.List;

public class ImageOverlap_835 {
    public static void main(String[] args){
        Solution_835 solution = new Solution_835();
        int[][] a = new int[][]{{0,1,0,1,1,1,0,0,1,0,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1},{1,1,1,1,1,0,1,1,1,1,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1},{1,1,1,0,0,1,0,1,1,0,1,0,1,1,1,1,0,1,1,0,1,1,0,0,1},{1,0,0,0,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,0,1,1,0,1,1},{1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,0},{1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1},{0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1},{1,1,1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1},{0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0},{1,1,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0},{1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,0,0,1,1,1,1},{1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,1,0,1},{1,0,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1},{0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1},{0,1,0,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0},{0,0,0,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1},{0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1},{0,1,0,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,0,0,1},{1,1,1,1,1,1,1,0,1,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1},{0,1,0,0,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1},{0,1,1,0,1,1,0,1,1,1,0,1,0,1,1,1,1,0,1,0,1,1,1,1,1},{1,0,1,1,0,1,1,0,0,1,0,1,1,0,1,1,1,1,0,1,1,1,1,0,1},{0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,1,1,1,1,0,1,1,1,0},{1,0,1,1,1,0,0,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1}};
        int[][] b = new int[][]{{1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1},{0,1,1,1,1,0,1,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1},{1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1},{1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1},{1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0},{1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1},{1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,1,1,0,1,0,1,1},{0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,0},{0,1,1,0,1,0,1,1,1,1,0,0,1,0,1,0,0,0,1,1,1,0,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1},{1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,0,1,1,1,1,0,1},{1,0,0,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,0,0,1,0,1,1,0},{1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1},{1,1,0,0,0,1,1,1,1,0,0,1,0,1,0,1,1,1,0,1,1,0,1,1,0},{0,1,1,0,1,0,1,1,1,1,1,0,1,0,1,0,0,1,1,1,1,1,1,1,1},{0,0,1,1,0,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,0,0,1,1,1},{1,1,1,1,0,1,1,0,1,0,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1},{1,1,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0},{1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,0,1,0,1,0,1,1,1,0,1},{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},{1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1},{1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1},{0,1,1,0,1,1,1,1,0,0,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1},{1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,1},{1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1}};
//        int[][] a = new int[][]{{1,1,0}, {0,1,0}, {0,1,0}};
//        int[][] b = new int[][]{{0,0,0}, {0,1,1}, {0,0,1}};
//        int[][] a = new int[][]{{1}};
//        int[][] b = new int[][]{{0}};
        System.out.println(solution.largestOverlap(a, b));
    }
}

class Solution_835 {
    public int largestOverlap(int[][] A, int[][] B) {
        int max = 0;
        for (int i = 0; i < A.length; i++) {
            for (int j = 0; j < A[0].length; j++) {
                if (A[i][j] == 1) {
                    int moveUD = 0;
                    int moveLR = 0;
                    int tempMax = 0;
                    boolean first = true;
                    for (int m = 0; m < B.length; m++) {
                        for (int n = 0; n < B[0].length; n++) {
                            if (B[m][n] == 1) {
                                if (first) {
                                    moveUD = m - i;
                                    moveLR = n - j;
                                    first = false;
                                }
                                if (i + moveUD == m) {
                                    tempMax++;
                                }
                            }
                            if (moveLR > 0 && j + moveLR >= A[0].length) {
                                break;
                            }

                        }

                        if (i + moveUD >= A.length || i + moveUD < 0) {
                            break;
                        }
                    }
                    max = Math.max(max, tempMax);
                }
            }
        }
        return max;
    }
}
